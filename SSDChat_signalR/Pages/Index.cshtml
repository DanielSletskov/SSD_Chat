@page
@model IndexModel
@{
    ViewData["Title"] = "Chat";
}

<div class="container" >
    <div>
        <input type="text" id="senderName" placeholder="Enter name"/> 
        <label>Insert name</label>
    </div>
    <div class="mt-5">
        <input type="text" id="message" placeholder="Enter your message" />
        <input type="button" id="SendMessage" value="Send" onclick="SendMessage()">
    </div>

    <div class="mt-3">
        <ul id="discussion"> </ul>
    </div>
    <div id="chatSection" class="row justify-content-center" style="display:none;">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 id="chatTitle">Secure Chat</h4>
                    <span id="connectionStatus" class="text-success"></span>
                </div>
                <div class="card-body" id="chatMessages" style="height: 400px; overflow-y: scroll;">
                    <!-- Messages will be shown here -->
                </div>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." disabled />
                        <button id="sendMessageBtn" class="btn btn-success" disabled>Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.7/dist/browser/signalr.min.js"> </script>
<script>
    const secretKey = "82a645babc5cd41c9a2cb4d0d3ba17ad";
    
    var connection = new signalR.HubConnectionBuilder()
    .withUrl("/chat")
    .build();

    connection.start().catch(function (err){
        return console.error(err.toString());
    });

    function encryptMessage(message) {
        return CryptoJS.AES.encrypt(message, secretKey).toString();
    }

    function decryptMessage(encryptedMessage) {
        let bytes = CryptoJS.AES.decrypt(encryptedMessage, secretKey);
        return bytes.toString(CryptoJS.enc.Utf8);
    }
    
    function SendMessage(senderName, message) {
        var message = encryptMessage(document.getElementById("message").value);
        //console.log(message);
        var senderName = document.getElementById("senderName").value;
        if (message.trim() === "") {
            alert("Please enter a message.");
            return;
        }
        connection.invoke("SendMessage", senderName, message)
            .then(() => document.getElementById("senderName").value)
            .then(() => document.getElementById("message").value = "") //Clear message area after send
            .catch(err => console.error(err.toString()));
        }

    connection.on("ReceiveMessage", function (senderName,message) {
        //console.log(message);
        var encodedMsg = senderName +": " + decryptMessage(message);
        var li = document.createElement("li");

        li.textContent = encodedMsg;
        document.getElementById("discussion").appendChild(li);
    });

</script>